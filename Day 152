// Alien Dictionary


class Solution {
  public:
    string findOrder(vector<string> &words) {
        // code here
        unordered_map<char, set<char>> adj;
        unordered_map<char, int> indegree;
        for(const string &w : words) {
            for(char ch : w) {
                indegree[ch]=0;
            }
        }
        for(int i=0; i<words.size()-1; i++) {
            string &w1=words[i];
            string &w2=words[i+1];
            int len=min(w1.size(), w2.size());
            bool fd=false;
            for(int j=0; j<len; j++) {
                if(w1[j]!=w2[j]) {
                    if(adj[w1[j]].find(w2[j])==adj[w1[j]].end()) {
                        adj[w1[j]].insert(w2[j]);
                        indegree[w2[j]]++;
                    }
                    fd=true;
                    break;
                }
            }
            if(!fd && w1.size()>w2.size()) {
                return "";
            }
        }
        queue<char> q;
        for(auto &entry : indegree) {
            if(entry.second==0) {
                q.push(entry.first);
            }
        }
        string res;
        while(!q.empty()) {
            char ch=q.front();
            q.pop();
            res+=ch;
            for(char neighbor : adj[ch]) {
                indegree[neighbor]--;
                if(indegree[neighbor]==0) {
                    q.push(neighbor);
                }
            }
        }
        if(res.size()!=indegree.size()) {
            return "";
        }
        return res;
    }
};
