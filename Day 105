//Get Min from Stack

class Solution {
  public:
    int mn;
    stack<int>st;
    Solution() {
        // code here
    }

    // Add an element to the top of Stack
    void push(int x) {
        // code here
        if(st.empty()) mn=x;
        else if(x<=mn) {
            st.push(mn);
            mn=x;
        }
        st.push(x);
    }

    // Remove the top element from the Stack
    void pop() {
        // code here
        if(st.empty()) return;
        int t=st.top();
        st.pop();
        if(t==mn && !st.empty()) {
            mn=st.top();
            st.pop();
        }
    }

    // Returns top element of the Stack
    int peek() {
        // code here
        if(st.empty()) return -1;
        return st.top();
    }

    // Finds minimum element of Stack
    int getMin() {
        // code here
        if(st.empty()) return -1;
        return mn;
    }
};
