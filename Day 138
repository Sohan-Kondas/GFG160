// DFS of a Graph
class Solution {
  public:
    void addEdge(vector<vector<int>> &adj, int s, int t) {
        adj[s].push_back(t);
        adj[t].push_back(s);
    }
    void dfsRec(vector<vector<int>> &adj, vector<bool> &visited, int s, vector<int> &res) {
        visited[s]=true;
        res.push_back(s);
        for(int i:adj[s]) 
            if(visited[i]==false) 
                dfsRec(adj, visited, i, res);
    }
    vector<int> dfs(vector<vector<int>>& adj) {
        // Code here
        vector<bool> visited(adj.size(), false);
        vector<int> res;
        for(int i=0; i<adj.size(); i++) {
            if(visited[i]==false) {
                dfsRec(adj, visited, i, res);
            }
        }
        return res;
    }
};
