//Find the number of islands
class DisjointSet {
    vector<int> par, rank;
public:
    DisjointSet(int n) {
        par.resize(n);
        rank.assign(n, 0);
        for(int i=0; i<n; ++i) 
            par[i]=i;
    }
    int find(int x) {
        if(par[x]!=x)
            par[x]=find(par[x]);
        return par[x];
    }
    void unite(int x, int y) {
        int xr=find(x), yr=find(y);
        if(xr==yr) return;
        if(rank[xr]<rank[yr]) {
            par[xr]=yr;
        } else if(rank[xr]>rank[yr]) {
            par[yr]=xr;
        } else {
            par[yr]=xr;
            rank[xr]++;
        }
    }
};

class Solution {
  public:
    int countIslands(vector<vector<char>>& grid) {
        // Code here
        int n=grid.size(), m=grid[0].size();
        DisjointSet ds(n*m);
        vector<pair<int, int>> dir= {
            {-1, 0}, {1, 0},
            {0, -1}, {0, 1},
            {-1, -1}, {-1, 1},
            {1, -1}, {1, 1}
        };
        auto gi=[&](int r, int c) { return r*m+c; };
        for(int r=0; r<n; r++) {
            for(int c=0; c<m; ++c) {
                if(grid[r][c]=='L') {
                    for(int i=0; i<dir.size(); ++i) {
                        int dr=dir[i].first;
                        int dc=dir[i].second;
                        int nr=r+dr, nc=c+dc;
                        if(nr>=0 && nr<n && nc>=0 && nc<m && grid[nr][nc]=='L') {
                            ds.unite(gi(r, c), gi(nr, nc));
                        }
                    }
                }
            }
        }
        unordered_set<int> unisl;
        for(int r=0; r<n; r++)
            for(int c=0; c<m; ++c)
                if(grid[r][c]=='L')
                    unisl.insert(ds.find(gi(r, c)));
        return unisl.size();
    }
};
