// Minimum cost to connect all houses in a city

// User Function Template
class Solution {
  public:
    vector<int> dijkstra(int V, vector<vector<int>> &edges, int src) {
        // Code here
        vector<vector<pair<int, int>>> adj(V);
        for(auto &e: edges) {
            int u=e[0], v=e[1], w=e[2];
            adj[u].push_back({v, w});
        }
        vector<int> dist(V, INT_MAX);
        dist[src]=0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push(make_pair(0, src));
        while(!pq.empty()) {
            pair<int, int> p=pq.top();
            pq.pop();
            int d=p.first;
            int node=p.second;
            for(int i=0; i<adj[node].size(); i++) {
                int an=adj[node][i].first;
                int wt=adj[node][i].second;
                if(dist[an]>d+wt) {
                    dist[an]=d+wt;
                    pq.push(make_pair(dist[an], an));
                }
            }
        }
        return dist;
    }
};
