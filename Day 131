// Boolean Parenthesization
// User function Template for C++
class Solution {
  public:
    bool evaluate(int b1, int b2, char op) {
        if(op=='&') {
            return b1& b2;
        } else if(op=='|') {
            return b1|b2;
        } else {
            return b1^b2;
        }
    }
    int helper(int st, int e, int r, string &s, vector<vector<vector<int>>>&dp) {
        if(st==e) {
            return (r==(s[st]=='T')) ? 1:0;
        }
        if (dp[st][e][r]!=-1) return dp[st][e][r];
        int ans=0;
        for(int k=st+1; k<e; k++) {
            int lt=helper(st, k-1, 1, s, dp);
            int lf=helper(st, k-1, 0, s, dp);
            int rt=helper(k+1, e, 1, s, dp);
            int rf=helper(k+1, e, 0, s, dp);
            if(evaluate(1, 1, s[k])==r) {
                ans+=lt*rt;
            }
            if(evaluate(1, 0, s[k])==r) {
                ans+=lt*rf;
            }
            if(evaluate(0, 1, s[k])==r) {
                ans+=lf*rt;
            }
            if(evaluate(0, 0, s[k])==r) {
                ans+=lf*rf;
            }
        }
        return dp[st][e][r]=ans;
    }
    int countWays(string &s) {
        // code here
        int n=s.length();
        vector<vector<vector<int>>>dp(n, vector<vector<int>>(n, vector<int>(2, -1)));
        return helper(0, n-1, 1, s, dp);
    }
};
