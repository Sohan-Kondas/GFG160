// Articulation Point -II
class Solution {
  public:
    vector<vector<int>> constrAdj(int V, vector<vector<int>>& edges) {
        vector<vector<int>> adj(V);
        for(auto& e:edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }
        return adj;
    }
    void findPts(vector<vector<int>>& adj, int u, vector<int>& vis, vector<int>& disc, vector<int>& low, int& time, int par, vector<int>& isAP) {
        vis[u]=1;
        disc[u]=low[u]=++time;
        int ch=0;
        for(int v: adj[u]) {
            if(!vis[v]) {
                ch++;
                findPts(adj, v, vis, disc, low, time, u, isAP);
                low[u]=min(low[u], low[v]);
                if(par!=-1 && low[v]>=disc[u]) {
                    isAP[u]=1;
                }
            } else if(v!=par) {
                low[u]=min(low[u], disc[v]);
            }
        }
        if(par==-1 && ch>1) {
            isAP[u]=1;
        }
    }
    vector<int> articulationPoints(int V, vector<vector<int>>& edges) {
        // Code here
        vector<vector<int>> adj=constrAdj(V, edges);
        vector<int> disc(V, 0), low(V, 0), vis(V, 0), isAP(V, 0);
        int time=0;
        for(int u=0; u<V; u++) {
            if(!vis[u]) {
                findPts(adj, u, vis, disc, low, time, -1, isAP);
            }
        }
        vector<int> res;
        for(int u=0; u<V; u++) {
            if(isAP[u]) {
                res.push_back(u);
            }
        }
        return res.empty() ? vector<int>{-1} : res;
    }
};
